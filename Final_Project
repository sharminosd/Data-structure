#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_ORDERS 100

struct F_item {
    char name[100];
    float price;
    int quantity;
    struct F_item* next;
};

struct Order {
    char item_name[100];
    int quantity;
    struct Order* next;
};

struct Order* orders = NULL;
struct Order* stack[MAX_ORDERS];
int top = -1;
void displayOrder(struct Order* orders);


struct F_item* createF_item(const char* name, float price, int quantity) {
    struct F_item* newItem = (struct F_item*)malloc(sizeof(struct F_item));
    strncpy(newItem->name, name, sizeof(newItem->name) - 1);
    newItem->name[sizeof(newItem->name) - 1] = '\0'; 
    newItem->price = price; // Assign the provided price value
    newItem->quantity = quantity;
    newItem->next = NULL;
    return newItem;
}


struct Order* createOrder(const char* name, int quantity) {
    struct Order* newOrder = (struct Order*)malloc(sizeof(struct Order));
    strncpy(newOrder->item_name, name, sizeof(newOrder->item_name) - 1);
    newOrder->item_name[sizeof(newOrder->item_name) - 1] = '\0'; // Ensure null-terminated string
    newOrder->quantity = quantity;
    newOrder->next = NULL;
    return newOrder;
}

void displayMenu(struct F_item* menu) {
    struct F_item* current = menu;
    printf("Food Menu:\n");
    while (current != NULL) {
        printf("%s - Price: %.2f - Quantity in Stock: %d\n", current->name, current->price, current->quantity);
        current = current->next;
    }
    printf("\n");
}

struct Order* placeOrder(struct F_item* menu, struct Order* orders) {
    displayMenu(menu);

    char item_name[100];
    int quantity;
    printf("Enter the name of the item you want to order: ");
    scanf("%s", item_name);
    printf("Enter the quantity: ");
    scanf("%d", &quantity);

    struct F_item* currentItem = menu;
    while (currentItem != NULL && strcmp(currentItem->name, item_name) != 0) {
        currentItem = currentItem->next;
    }

    if (currentItem == NULL) {
        printf("Item not found in the menu.\n");
        return orders;
    }

    if (quantity > currentItem->quantity) {
        printf("Insufficient quantity in stock.\n");
        return orders;
    }

    currentItem->quantity -= quantity;

    struct Order* newOrder = createOrder(item_name, quantity);
    if (orders == NULL) {
        orders = newOrder;
    } else {
        struct Order* lastOrder = orders;
        while (lastOrder->next != NULL) {
            lastOrder = lastOrder->next;
        }
        lastOrder->next = newOrder;
    }

    printf("Order placed successfully!\n");
    return orders;
}





void generateAndPrintBill(struct Order* orders, struct F_item* menu) {
    printf("Generating Bill...\n");
    printf("\n========== Bill ==========\n");

    float totalCost = 0;
    struct Order* currentOrder = orders;

    while (currentOrder != NULL) {
        struct F_item* currentItem = menu;
        while (currentItem != NULL && strcmp(currentItem->name, currentOrder->item_name) != 0) {
            currentItem = currentItem->next;
        }

        if (currentItem != NULL) {
            float itemCost = currentItem->price * currentOrder->quantity;
            totalCost += itemCost;
            printf("%s - Quantity: %d - Cost: %.2f\n", currentOrder->item_name, currentOrder->quantity, itemCost);
        }

        currentOrder = currentOrder->next;
    }

    printf("\nTotal Cost: %.2f\n", totalCost);
    printf("==========================\n");
}

struct F_item* addNewItemToMenu(struct F_item* menu) {
    char name[100];
    float price;
    int quantity;

    printf("Enter the name of the new item: ");
    scanf("%s", name);
    printf("Enter the price of the new item: ");
    scanf("%f", &price);
    printf("Enter the quantity in stock for the new item: ");
    scanf("%d", &quantity);

    struct F_item* newItem = createF_item(name, price, quantity);

    if (menu == NULL) {
        menu = newItem;
    } else {
        struct F_item* lastItem = menu;
        while (lastItem->next != NULL) {
            lastItem = lastItem->next;
        }
        lastItem->next = newItem;
    }

    printf("%s added to the menu.\n", name);
    return menu;
}

void push(struct Order* item) {
    if (top >= MAX_ORDERS - 1) {
        printf("Stack Overflow - Cannot push more orders.\n");
        return;
    }
    stack[++top] = item;
}

struct Order* pop() {
    if (top < 0) {
        printf("Stack Underflow - No orders to pop.\n");
        return NULL;
    }
    return stack[top--];
}


void displayOrder(struct Order* orders) {
    printf("Displaying Order:\n");
    // Iterate through the orders and display details
    while (orders != NULL) {
        printf("Item: %s - Quantity: %d\n", orders->item_name, orders->quantity);
        orders = orders->next;
    }
    printf("\n");
}

void displayOrderHistory(struct Order* stack) {
    printf("Order History:\n");
    int orderNumber = 1;
    while (stack != NULL) {
        printf("Order %d:\n", orderNumber++);
        displayOrder(stack); // Assuming displayOrder is defined elsewhere
        stack = stack->next;
    }
    printf("\n");
}

int main() {
    
    struct F_item* menu = createF_item("Burger", 6.0, 10);
    menu->next = createF_item("Pizza", 8.0, 8);  // Corrected price from 6.0 to 8.0
    menu->next->next = createF_item("Pasta", 7.0, 12);

    while (1) {
        int choice;
        printf("Restaurant Management System\n");
        printf("1. Place an order\n");
        printf("2. Display order\n");
        printf("3. Generate and Print Bill\n");
        printf("4. View Available Items and Quantities\n");
        printf("5. Add a new item to the menu\n");
        printf("6. View Order History\n");
        printf("7. Undo Last Order\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                orders = placeOrder(menu, orders);
                break;
            case 2:
                displayOrder(orders);
                break;
            
            case 3:
                generateAndPrintBill(orders, menu);
                break;
            case 4:
                displayMenu(menu);
                break;
            case 5:
                menu = addNewItemToMenu(menu);
                break;
            case 6:
                printf("View Order History:\n");
                for (int i = 0; i <= top; ++i) {
                    printf("Order %d:\n", i + 1);
                    displayOrder(stack[i]);
                }
                printf("\n");
                break;
          case 7:
                if (top >= 0) {
                    printf("Undoing the last order...\n");
                    orders = pop();
                    if (orders != NULL) {
                        displayOrder(orders);
                    }
                } else {
                    printf("No orders to undo.\n");
                }
                break;
            case 8:
                printf("Exiting... Thank you!\n");
                exit(0);
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }

  push(orders);
    }

    return 0;
}
